apply plugin: 'ch.kk7.spawn'

description = 'Okapi - Neo4j IO test utils'

sourceSets {
    services {}
}

dependencies {
    compile project(':okapi-neo4j-io')
    compile project(':okapi-testing')

    compile group: 'org.bouncycastle', name: 'bctls-jdk15on', version: ver.bctls

    servicesCompile group: 'org.neo4j.test', name: 'neo4j-harness',            version: ver.neo4j.harness
    servicesCompile group: 'org.neo4j.test', name: 'neo4j-harness-enterprise', version: ver.neo4j.harness
}


def neo4jStartedMarker() { 'neo4j started' }

def neo4jCommandLine(int instances) {
    def java = System.getProperty('java.home') + '/bin/java'
    def classpath = sourceSets.services.runtimeClasspath.collect { it.absolutePath }.join(':')
    def main = 'org.opencypher.testing.services.Neo4j'
    return [java, '-cp', classpath, main, neo4jStartedMarker(), instances.toString()]
}

task neo4jStart(type: ch.kk7.gradle.spawn.SpawnTask) {
    description "launches neo4j in a separate jvm"
    group "services"

    dependsOn sourceSets.services.runtimeClasspath

    commandLine = neo4jCommandLine(1)
    waitFor     = neo4jStartedMarker()
    doLast { println getStdoutFile().text }
}

task neo4jStop(type: ch.kk7.gradle.spawn.KillTask) {
    description "stops neo4j in a separate jvm"
    group "services"
    kills tasks.neo4jStart
}


task neo4jStartDouble(type: ch.kk7.gradle.spawn.SpawnTask) {
    description "launches neo4j in a separate jvm"
    group "services"

    dependsOn sourceSets.services.runtimeClasspath

    commandLine = neo4jCommandLine(2)
    waitFor     = neo4jStartedMarker()
    doLast { println getStdoutFile().text }
}

task neo4jStopDouble(type: ch.kk7.gradle.spawn.KillTask) {
    description "stops neo4j in a separate jvm"
    group "services"
    kills tasks.neo4jStartDouble
}

tasks.test.dependsOn(tasks.neo4jStart)
tasks.test.finalizedBy(tasks.neo4jStop)

task bar {
    doLast {
        println foo()
    }
}
