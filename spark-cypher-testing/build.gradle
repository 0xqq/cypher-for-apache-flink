apply plugin: 'ch.kk7.spawn'

description = 'Cypher for Apache Spark - Test Utilities'

sourceSets {
    services {}
}

dependencies {
    compile project(':spark-cypher')
    compile project(':okapi-testing')
    compile project(':okapi-neo4j-io-testing')

    compile group: 'org.apache.spark', name: "spark-core".scala(), version: ver.spark
    compile group: 'org.apache.spark', name: "spark-sql".scala(), version: ver.spark
    compile group: 'org.apache.spark', name: "spark-hive".scala(), version: ver.spark
    compile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: ver.hadoop

    testCompile project(':okapi-api').sourceSets.test.output
    testCompile group: 'com.h2database', name: 'h2', version: ver.h2
    testCompile group: 'org.spire-math', name: 'claimant'.scala(), version: ver.claimant

    servicesCompile group: 'org.neo4j.test', name: 'neo4j-harness', version: '3.4.10' //ver.neo4j.main
}

task neo4jstart(type: ch.kk7.gradle.spawn.SpawnTask) {
    dependsOn sourceSets.services.runtimeClasspath
    def java = System.getProperty('java.home') + '/bin/java'
    def classpath = sourceSets.services.runtimeClasspath.collect { it.absolutePath }.join(':')
    def main = 'org.opencypher.testing.services.Neo4j'
    def marker = 'neo4j started'
    
    commandLine = [java, '-cp', classpath, main, marker]
    waitFor = marker
}

task neo4jstop(type: ch.kk7.gradle.spawn.KillTask) {
    kills tasks.neo4jstart
}
